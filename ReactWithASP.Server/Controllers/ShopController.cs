using Microsoft.AspNetCore.Mvc;
using ReactWithASP.Server.Domain;
using ReactWithASP.Server.Domain.Abstract;
using ReactWithASP.Server.DTO;
using ReactWithASP.Server.Infrastructure;

namespace ReactWithASP.Server.Controllers
{
  public abstract class ShopController : MyBaseController
  {
    protected enum UserType { Guest, AppUser, GoogleAppUser, None };

    protected IGuestRepository guestRepo;
    protected ICartLineRepository cartLineRepo;
    protected IInStockRepository inStockRepo;

    public ShopController(ICartLineRepository rRepo, IGuestRepository gRepo, IInStockRepository pRepo) {
      guestRepo = gRepo;
      cartLineRepo = rRepo;
      inStockRepo = pRepo;
    }

    // Fetches a Guest object from the database, creating if necessary.
    // Generates the Guest ID if it does not already exist.
    // If you pass a Guest object as argument, its values (if not null) will overwrite the ones that are in the database.
    // If you pass a Guest object will all null values except Email, only the Email value will be used to overwrite.
    // The Guest ID gets saved to the cookie before we return the finalised Guest object.
    protected Guest EnsureGuestFromCookieAndDb(Guest? updateDto)
    {
      // The Guest ID is generated by our server, and saved to the DB before we ever send it to the user's cookie.
      // So we never need to update the ID.

      Guest guest = new Guest();

      // See if guest ID cookie exists...
      string cookieGuestId = Request.Cookies[MyExtensions.GuestCookieName];
      if (string.IsNullOrEmpty(cookieGuestId)){
        // Could not get ID from cookie. We will create it in a moment...
      }
      else{  
        // Got an ID from the cookie...
        guest.ID = cookieGuestId.ToGuid();
      }

      // Do we need to generate the ID for the first time ?
      if (guest.ID == null){
        guest.ID = Guid.NewGuid();
      }

      // Look up guest in database.
      Guest dbGuest = guestRepo.Guests.FirstOrDefault(g => g.ID == guest.ID); 
      if (dbGuest != null){
        // There was a record in the database...
        guest.Email = dbGuest.Email;
        guest.FirstName = dbGuest.FirstName;
        guest.LastName = dbGuest.LastName;
      }

      // Incoming update values (if available) will overwrite existing database ones...
      if (updateDto != null){
        guest.Email     = updateDto.Email     ?? guest.Email;     // Overwrite from updateDto if available.
        guest.FirstName = updateDto.FirstName ?? guest.FirstName; // Overwrite from updateDto if available.
        guest.LastName  = updateDto.LastName  ?? guest.LastName;  // Overwrite from updateDto if available.
      }

      // Persist to database.
      guestRepo.SaveGuest(guest);

      // Persist ID to cookie.
      HttpContext.Response.Cookies.Delete(MyExtensions.GuestCookieName);
      Response.Cookies.Append(MyExtensions.GuestCookieName, guest.ID.ToString(), MyExtensions.CookieOptions);

      // Return whatever data we have.
      return guest;
    }
  }
}