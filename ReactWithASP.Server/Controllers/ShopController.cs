using Microsoft.AspNetCore.Mvc;
using ReactWithASP.Server.Domain;
using ReactWithASP.Server.Domain.Abstract;
using ReactWithASP.Server.DTO;
using ReactWithASP.Server.Infrastructure;
using System.Security.Claims;

namespace ReactWithASP.Server.Controllers
{
  public abstract class ShopController : MyBaseController
  {
    protected enum UserType { Guest, AppUser, GoogleAppUser, None };

    protected IGuestRepository guestRepo;
    protected ICartLineRepository cartLineRepo;
    protected IInStockRepository inStockRepo;
    protected Microsoft.AspNetCore.Identity.UserManager<AppUser> _userManager;

    public ShopController(ICartLineRepository rRepo, IGuestRepository gRepo, IInStockRepository pRepo, Microsoft.AspNetCore.Identity.UserManager<AppUser> userManager) {
      guestRepo = gRepo;
      cartLineRepo = rRepo;
      inStockRepo = pRepo;
      _userManager = userManager;
    }

    protected void DeleteGuestCookie(){
      HttpContext.Response.Cookies.Delete(MyExtensions.GuestCookieName);
    }

    protected string? GetLoggedInUserIdFromIdentityCookie()
    {
      string? uid = User.Identity.IsAuthenticated ? User.FindFirstValue(ClaimTypes.NameIdentifier) : null;
      return uid;
    }

    // Fetches a Guest object from the database, creating if necessary.
    // Generates the Guest ID if it does not already exist.
    // If you pass a Guest object as argument, its values (if not null) will overwrite the ones that are in the database.
    // If you pass a Guest object will all null values except Email, only the Email value will be used to overwrite.
    // The Guest ID gets saved to the cookie before we return the finalised Guest object.
    protected async Task<Guest?> EnsureGuestFromCookieAndDb(Guest? guestUpdate)
    {
      try
      {
        // The Guest ID is generated by our server, and saved to the DB before we ever send it to the user's cookie.
        // So we never need to update the ID.

        Guid? gid = null;

        // See if guest ID cookie exists...
        string cookieGuestId = Request.Cookies[MyExtensions.GuestCookieName];
        if (string.IsNullOrEmpty(cookieGuestId))
        {
          // Could not get ID from cookie. We will create it in a moment...
        }
        else
        {
          // Got an ID from the cookie...
          gid = cookieGuestId.ToGuid();
        }

        // Do we need to generate the ID for the first time ?
        if (gid == null)
        {
          gid = Guid.NewGuid();
        }

        GuestUpdateDTO dto =  new GuestUpdateDTO {
          ID        = (Guid)gid,
          Email     = (guestUpdate != null) ? guestUpdate.Email     : null,
          FirstName = (guestUpdate != null) ? guestUpdate.FirstName : null,
          LastName  = (guestUpdate != null) ? guestUpdate.LastName  : null,
          Picture   = (guestUpdate != null) ? guestUpdate.Picture   : null,
        };
        Guest? guest = await guestRepo.UpdateWithTransaction(dto);
        
        // Persist ID to cookie.
        DeleteGuestCookie();
        Response.Cookies.Append(MyExtensions.GuestCookieName, gid.ToString(), MyExtensions.CookieOptions);

        // Return the finalized guest object.
        return guest;
      }
      catch (Exception ex)
      {
        throw;
      }
    }
  }
}