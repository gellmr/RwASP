name: Deploy .NET Core App to IIS on Windows Server

on:
  push:
    branches:
      - main

env:
  PROJECT_PATH: 'ReactWithASP.Server\ReactWithASP.Server.csproj'
  PUBLISH_DIR:  'ReactWithASP.Server\bin\Release\net8.0\publish'
  CLIENT_PATH:  'reactwithasp.client'
  SERVER_WWWROOT_PATH: 'ReactWithASP.Server\wwwroot'

jobs:
  build_and_deploy:
    runs-on: windows-latest

    # Here we specify the GitHub actions which we want to execute in the runner environment.
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3 # This action clones the repo into the runner vm.

    # Frontend build...
    ###################
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.CLIENT_PATH }}\package-lock.json

    - name: Install and Build Frontend (Vite)
      working-directory: ${{ env.CLIENT_PATH }}
      run: |
        npm install
        npm run build
      env:
        VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        VITE_CSRF_HEADER_NAME: ${{ secrets.VITE_CSRF_HEADER_NAME }}

    - name: Create Marker File
      shell: pwsh
      run: |
        # Create a marker file in the Vite build output directory
        Set-Content -Path "${{ github.workspace }}\${{ env.CLIENT_PATH }}\dist\build_marker.txt" -Value "Vite build completed successfully. VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}"

    # Server build...
    #################
    # This action sets up the .NET Core SDK in the runner vm environment.
    # Specify what version to install.
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # Command that fetches all the NuGet packages.
    - name: Restore .NET dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Create appsettings.json files
      shell: pwsh
      run: |
        # Create appsettings.json
        '${{ secrets.BASE_APPSETTINGS_JSON }}' | Out-File -FilePath "ReactWithASP.Server/appsettings.json" -Encoding utf8

        # Create appsettings.Production.json
        '${{ secrets.PRODUCTION_APPSETTINGS_JSON }}' | Out-File -FilePath "ReactWithASP.Server/appsettings.Production.json" -Encoding utf8

    - name: Copy Frontend Assets
      shell: pwsh
      run: |
        # Create the destination directory if it doesn't exist
        if (-Not (Test-Path "${{ env.SERVER_WWWROOT_PATH }}")) {
          New-Item -Path "${{ env.SERVER_WWWROOT_PATH }}" -ItemType Directory
        }

        # Remove all existing files and subdirectories from wwwroot
        Remove-Item -Path "${{ env.SERVER_WWWROOT_PATH }}\*" -Recurse -Force

        # Copy the contents of the Vite build folder into the server's wwwroot
        Copy-Item -Path "${{ env.CLIENT_PATH }}\dist\*" -Destination "${{ env.SERVER_WWWROOT_PATH }}" -Recurse -Force

    # Compiles the code, and collects all necessary files into a single folder.
    # Output to a folder within the runner's C drive so a later step can find the files.
    - name: Build and Publish Backend (.NET)
      shell: pwsh
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} --configuration Release -o ${{ env.PUBLISH_DIR }} /p:WebPublishMethod=FileSystem /p:PublishProvider=MSDeploy /p:NoClientBuild=true

    - name: Check for Marker File
      shell: pwsh
      run: |
        # Test-Path checks for the existence of a file or folder
        if (-Not (Test-Path "${{ github.workspace }}\${{ env.PUBLISH_DIR }}\wwwroot\build_marker.txt")) {
          Write-Host "##vso[task.logissue type=error]Marker file not found in wwwroot! The server build may have failed to include client assets."
          exit 1
        }

    # Deploy...
    ###########
    - name: Deploy to IIS using msdeploy.exe
      shell: pwsh
      run: |
        $deploycmd   = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        $publishPath = "${{ github.workspace }}\${{ env.PUBLISH_DIR }}"
        $siteName    = "${{ secrets.IIS_SITE_NAME_PROP }}"
        $destFolder  = "${{ secrets.WEBDEPLOY_DESTFOLDER }}"
        $compName    = "https://${{ secrets.WEBDEPLOY_SERVER }}/msdeploy.axd?site=${{ secrets.IIS_SITE_NAME_PROP }}"
        $myuser      = "${{ secrets.WEBDEPLOY_USERNAME }}"
        $mypass      = "${{ secrets.WEBDEPLOY_PASSWORD }}"
        $skipPattern = "^wwwroot\\userpic$"
        & "$deploycmd" -verb:sync -source:iisApp="$publishPath" -dest:iisApp="$siteName,computerName=$compName,userName=$myuser,password=$mypass,AuthType=Basic" -enableRule:AppOffline -allowUntrusted -skip:objectName=dirPath,absolutePath=$skipPattern
